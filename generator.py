# generator.py (finalna wersja "Agentowa" jako modu≈Ç)
import json
import time
import logging
from datetime import datetime, timedelta
import requests
from eventregistry import EventRegistry, QueryArticlesIter
from bs4 import BeautifulSoup
import openai
import base64
import textwrap
import re

# --- Import konfiguracji ---
try:
    from config import SITES, COMMON_KEYS
except ImportError:
    print("B≈ÅƒÑD: Nie znaleziono pliku config.py.")
    exit()

# --- Konfiguracja logowania ---
logging.basicConfig(
    level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("generator.log", encoding='utf-8'), logging.StreamHandler()]
)

# --- Inicjalizacja Klient√≥w API ---
try:
    openai_client = openai.OpenAI(api_key=COMMON_KEYS["OPENAI_API_KEY"])
except Exception as e:
    logging.error(f"Nie uda≈Ço siƒô zainicjowaƒá klienta OpenAI: {e}")
    exit()
    
# --- TR√ìJETAPOWY PROCES GENEROWANIA ARTYKU≈ÅU ---

def parse_outline_to_sections(outline_str):
    """
    Parsuje plan artyku≈Çu wygenerowany przez AI (w HTML) i zwraca listƒô sekcji.
    Ka≈ºda sekcja ma: tytu≈Ç, opis (kr√≥tkie 1‚Äì2 zdania), nag≈Ç√≥wek (`<h2>` lub `<h3>`).
    """
    soup = BeautifulSoup(outline_str, 'html.parser')
    sections = []

    for tag in soup.find_all(['h2', 'h3']):
        title = tag.get_text(strip=True)
        desc = ""
        next_sibling = tag.find_next_sibling()
        if next_sibling and next_sibling.name == 'p':
            desc = next_sibling.get_text(strip=True)
        sections.append({"tag": tag.name, "title": title, "desc": desc})

    return sections

def step1_research_for_section(section, topic_data):
    """Wykonuje dog≈Çƒôbny research tylko dla jednej sekcji."""
    prompt = textwrap.dedent(f"""
        Twoim zadaniem jest przeprowadziƒá **dok≈Çadny, oparty na danych research** tylko do poni≈ºszej sekcji artyku≈Çu:

        <{section['tag']}>{section['title']}</{section['tag']}>
        Opis sekcji: {section['desc']}

        Punkt wyj≈õcia:
        - Tytu≈Ç tematu: {topic_data.get('title')}
        - URL ≈∫r√≥d≈Çowy: {topic_data.get('url')}
        - Kontekst wprowadzajƒÖcy: {topic_data.get('body_snippet')}

        Znajd≈∫:
        - aktualne dane, raporty, liczby,
        - tezy ekspert√≥w i ich cytaty,
        - kontekst historyczny i kontrowersje,
        - konkretne informacje do tej sekcji.

        Nie pisz tekstu! Wypunktuj precyzyjne informacje. 
        ≈πr√≥d≈Ça muszƒÖ byƒá wiarygodne ‚Äì Perplexity, raporty, instytucje.
    """)
    return _call_perplexity_api(prompt)

def generate_section(research_data, site_config, section, prompt_template):
    """Generuje tre≈õƒá jednej sekcji artyku≈Çu na podstawie researchu i planu."""
    prompt = textwrap.dedent(f"""
        Twoim zadaniem jest napisaƒá tylko jednƒÖ sekcjƒô artyku≈Çu premium, zgodnie z poni≈ºszymi zasadami i danymi.

        <h2>{section['title']}</h2>
        Opis sekcji: {section['desc']}

        --- 
        Zasady pisania:
        {prompt_template}
        ---
        Dane z researchu:
        {research_data}

        Napisz tre≈õƒá tej jednej sekcji w formacie HTML. U≈ºyj nag≈Ç√≥wka <{section['tag']}>. Zachowaj styl narracyjny, analityczny i ekspercki.
    """)

    return _call_perplexity_api(prompt)

def _call_perplexity_api(prompt):
    """Pomocnicza funkcja do wywo≈Çywania API Perplexity."""
    headers = {"Authorization": f"Bearer {COMMON_KEYS['PERPLEXITY_API_KEY']}", "Content-Type": "application/json"}
    payload = {"model": "sonar-pro", "messages": [{"role": "user", "content": prompt}]}
    try:
        response = requests.post("https://api.perplexity.ai/chat/completions", headers=headers, data=json.dumps(payload), timeout=400)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        logging.error(f"B≈ÇƒÖd API Perplexity: {e}")
        return None

def step1_research(topic_data, site_config):
    """Krok 1: AI przeprowadza research i zbiera 'surowe' dane oraz elementy narracyjne."""
    logging.info("--- KROK 1: Rozpoczynam research i syntezƒô danych... ---")
    prompt = textwrap.dedent(f"""
        Twoim zadaniem jest przeprowadzenie dog≈Çƒôbnego researchu na temat z poni≈ºszych danych. Przeanalizuj podany URL i/lub tematykƒô i znajd≈∫ dodatkowe, wiarygodne ≈∫r√≥d≈Ça.
        **NIE PISZ ARTYKU≈ÅU.** Twoim celem jest wy≈ÇƒÖcznie zebranie i przedstawienie kluczowych informacji.

        **TEMAT DO ANALIZY:**
        - URL: {topic_data.get('url', 'Brak')}
        - Tytu≈Ç: "{topic_data.get('title', '')}"
        - Kontekst: "{topic_data.get('body_snippet', '')}"

        **ZNAJD≈π I WYPISZ W PUNKTACH:**
        - Kluczowe fakty, liczby, statystyki.
        - Nazwiska ekspert√≥w i ich tezy. Tak≈ºe cytaty.
        - Wa≈ºne daty i nazwy oficjalnych dokument√≥w lub raport√≥w.
        - G≈Ç√≥wne argumenty "za" i "przeciw" (je≈õli dotyczy).
        - Potencjalny materia≈Ç do tabeli por√≥wnawczej.
        - **Elementy narracyjne:** Znajd≈∫ "ludzki" kƒÖt, interesujƒÖce anegdoty, kontrowersje lub punkty zwrotne w historii tematu, kt√≥re mogƒÖ uczyniƒá artyku≈Ç ciekawszym.

        Zwr√≥ƒá odpowied≈∫ jako zwiƒôz≈ÇƒÖ, dobrze zorganizowanƒÖ listƒô punkt√≥w.
    """)
    return _call_perplexity_api(prompt)

def step2_create_outline(research_data, site_config, keyword=None):
    """Krok 2: AI tworzy kreatywny i zhumanizowany plan artyku≈Çu."""
    logging.info("--- KROK 2: Tworzƒô kreatywny i szczeg√≥≈Çowy plan artyku≈Çu... ---")

    # Dynamiczne tworzenie instrukcji dotyczƒÖcej tytu≈Çu
    title_instruction = "1.  Zaproponuj nowy, chwytliwy i merytoryczny tytu≈Ç. Najlepiej jednak, by s≈Çowo kluczowe znalaz≈Ço siƒô w tytule, to wa≈ºne pod SEO. Umie≈õƒá go w tagu `<h2>`."
    if keyword:
        title_instruction = f"1.  Zaproponuj nowy, chwytliwy i merytoryczny tytu≈Ç. **WARUNEK KONIECZNY:** Tytu≈Ç musi zawieraƒá dok≈ÇadnƒÖ frazƒô kluczowƒÖ: '{keyword}'. To jest najwa≈ºniejsze dla SEO. Umie≈õƒá gotowy tytu≈Ç w tagu `<h2>`."

    prompt = textwrap.dedent(f"""
        Na podstawie poni≈ºszej syntezy danych, stw√≥rz **kreatywny, anga≈ºujƒÖcy i logiczny plan artyku≈Çu premium** dla portalu {site_config['friendly_name']}.

        **ZEBRANE DANE:**
        {research_data}

        **TWOJE ZADANIE:**
        {title_instruction}
        2.  **Stw√≥rz unikalnƒÖ strukturƒô artyku≈Çu.** Nie trzymaj siƒô jednego szablonu. Dobierz sekcje i ich kolejno≈õƒá tak, aby jak najlepiej opowiedzieƒá historiƒô i wyja≈õniƒá temat czytelnikowi.
        3.  Zaproponuj **kreatywne i intrygujƒÖce tytu≈Çy dla poszczeg√≥lnych sekcji** (`<h2>`, `<h3>`), a nie tylko generyczne opisy typu "Analiza danych".
        4.  **Inteligentnie dobierz elementy z bardzo warto≈õciowym contentem.** Zastan√≥w siƒô, czy do TEGO KONKRETNEGO tematu pasujƒÖ takie bloki jak: **tabela por√≥wnawcza**, **analiza historyczna**, **praktyczne porady** lub **box z kluczowymi informacjami**. W≈ÇƒÖcz je do planu **tylko wtedy, gdy majƒÖ sens** i realnie wzbogacajƒÖ tre≈õƒá, a nie dlatego, ≈ºe musisz.
        5.  Pod ka≈ºdym nag≈Ç√≥wkiem napisz w 1-2 zdaniach, co dok≈Çadnie zostanie w tej sekcji opisane.
        6.  Nie u≈ºywaj w podtytu≈Çach s≈Ç√≥w: "Wstƒôp", "Zako≈Ñczenie", "Prolog", "Epilog" "Premium", "Box". Czytelne nag≈Ç√≥wki tylko, naturalnie wplecione.

        Zwr√≥ƒá tylko i wy≈ÇƒÖcznie kompletny, gotowy do realizacji plan artyku≈Çu.
    """)
    return _call_perplexity_api(prompt)

def step3_write_article(research_data, outline, site_config):
    """Tworzy artyku≈Ç sekcja po sekcji zgodnie z planem."""
    logging.info("--- KROK 3: Pisanie artyku≈Çu sekcja po sekcji ---")
    prompt_template = site_config['prompt_template']

    sections = parse_outline_to_sections(outline)
    full_article_html = ""
    
    for idx, section in enumerate(sections):
        logging.info(f"üìù Generowanie sekcji {idx + 1}/{len(sections)}: {section['title']}")
        section_html = generate_section(research_data, site_config, section, prompt_template)
        if not section_html:
            logging.warning(f"‚ö†Ô∏è Sekcja '{section['title']}' nie zosta≈Ça wygenerowana.")
            continue
        full_article_html += f"\n{section_html.strip()}\n"

    return full_article_html.strip()


# --- FUNKCJE POMOCNICZE ---
def get_auth_header(site_config):
    if site_config['auth_method'] == 'bearer':
        return {'Authorization': f"Bearer {site_config['wp_bearer_token']}"}
    else:
        credentials = f"{site_config['wp_username']}:{site_config['wp_password']}"
        token = base64.b64encode(credentials.encode()).decode('utf-8')
        return {'Authorization': f"Basic {token}"}

def get_event_registry_topics(site_config):
    logging.info("Pobieranie temat√≥w z EventRegistry...")
    try:
        er = EventRegistry(apiKey=site_config['event_registry_key'])
        query = QueryArticlesIter(conceptUri=site_config['er_concept_uri'], lang="pol", dateStart=datetime.now().date() - timedelta(days=3))
        for article in query.execQuery(er, sortBy="rel", maxItems=1):
            return {"title": article.get("title"), "body_snippet": article.get("body", "")[:700], "source_name": article.get("source", {}).get("title"), "url": article.get("url"), "image_url": article.get("image")}
        return None
    except Exception as e:
        logging.error(f"B≈ÇƒÖd podczas pobierania temat√≥w z EventRegistry: {e}")
        return None

def get_all_wp_categories(site_config):
    logging.info(f"Pobieranie kategorii z {site_config['friendly_name']}...")
    url = f"{site_config['wp_api_url_base']}/categories?per_page=100" 
    headers = get_auth_header(site_config)
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return {cat['name']: cat['id'] for cat in response.json()}
    except requests.exceptions.RequestException as e:
        logging.error(f"Nie uda≈Ço siƒô pobraƒá listy kategorii: {e}")
        return None

def choose_category_ai(title, content_snippet, available_categories_names, fallback_category="Bez kategorii"):
    if not available_categories_names or len(available_categories_names) <= 1:
        return next(iter(available_categories_names)) if available_categories_names else fallback_category
    logging.info(f"Wybieranie kategorii przez AI...")
    categories_str = ", ".join(available_categories_names)
    prompt_content = (f"Wybierz JEDNƒÑ, najlepszƒÖ kategoriƒô dla artyku≈Çu z listy. Tytu≈Ç: \"{title}\". Dostƒôpne kategorie: [{categories_str}]. Zwr√≥ƒá tylko nazwƒô.")
    try:
        response = openai_client.chat.completions.create(model="gpt-4o-mini", messages=[{"role": "user", "content": prompt_content}], temperature=0.0, max_tokens=20)
        chosen_category = response.choices[0].message.content.strip().replace('"', '')
        return chosen_category if chosen_category in available_categories_names else fallback_category
    except Exception as e:
        logging.error(f"B≈ÇƒÖd podczas wyboru kategorii przez AI: {e}")
        return fallback_category

def generate_tags_ai(title, content):
    logging.info("Generowanie tag√≥w AI...")
    prompt = [{"role": "system", "content": "Wygeneruj 5-7 trafnych tag√≥w (1-2 s≈Çowa ka≈ºdy, po polsku) do artyku≈Çu. Zwr√≥ƒá jako listƒô JSON, np. [\"tag1\", \"tag2\"]."}, {"role": "user", "content": f"Tytu≈Ç: {title}\nFragment:{content[:1000]}"}]
    try:
        response = openai_client.chat.completions.create(model="gpt-4o-mini", messages=prompt, temperature=0.2, max_tokens=100, response_format={"type": "json_object"})
        tags_data = json.loads(response.choices[0].message.content)
        return tags_data if isinstance(tags_data, list) else tags_data.get("tags", [])
    except Exception as e:
        logging.error(f"B≈ÇƒÖd podczas generowania tag√≥w AI: {e}")
        return []

def get_or_create_term_id(name, term_type, site_config):
    headers = get_auth_header(site_config)
    url = f"{site_config['wp_api_url_base']}/{term_type}"
    try:
        response = requests.get(url, headers=headers, params={'search': name})
        response.raise_for_status()
        for term in response.json():
            if term.get("name", "").lower() == name.lower(): return term["id"]
        logging.info(f"Termin '{name}' nie istnieje. Tworzenie nowego ({term_type})...")
        create_resp = requests.post(url, headers=headers, json={"name": name, "slug": name.lower().replace(' ', '-')})
        create_resp.raise_for_status()
        return create_resp.json()["id"]
    except requests.exceptions.RequestException as e:
        logging.error(f"B≈ÇƒÖd podczas obs≈Çugi terminu '{name}': {e}")
        return None

def upload_image_to_wp(image_source, article_title, site_config):
    if not image_source: return None
    img_content, content_type = None, 'image/jpeg'
    if isinstance(image_source, str) and image_source.startswith('http'):
        logging.info(f"Pobieranie obrazka z URL: {image_source}")
        try:
            img_response = requests.get(image_source, stream=True, timeout=20)
            img_response.raise_for_status()
            img_content, content_type = img_response.content, img_response.headers.get('content-type', 'image/jpeg')
        except requests.exceptions.RequestException as e:
            logging.error(f"B≈ÇƒÖd podczas pobierania obrazka z URL: {e}")
            return None
    else:
        logging.info("Przetwarzanie wgranego obrazka...")
        img_content, content_type = image_source.getvalue(), image_source.type
    try:
        headers = get_auth_header(site_config)
        ascii_title = article_title.encode('ascii', 'ignore').decode('ascii')
        safe_filename_base = ''.join(c for c in ascii_title if c.isalnum() or c in " ").strip().replace(' ', '_')
        filename = f"{safe_filename_base[:50]}_img.jpg"
        headers['Content-Disposition'] = f'attachment; filename="{filename}"'
        headers['Content-Type'] = content_type
        wp_r = requests.post(f"{site_config['wp_api_url_base']}/media", headers=headers, data=img_content)
        wp_r.raise_for_status()
        logging.info("Obrazek przes≈Çany pomy≈õlnie.")
        return wp_r.json().get("id")
    except Exception as e:
        logging.error(f"B≈ÇƒÖd podczas przesy≈Çania obrazka do WP: {e}")
        return None

def publish_to_wp(data_to_publish, site_config):
    logging.info(f"Publikowanie na {site_config['friendly_name']}: '{data_to_publish['title']}'")
    url = f"{site_config['wp_api_url_base']}/posts"
    headers = get_auth_header(site_config)
    headers['Content-Type'] = 'application/json'
    try:
        r = requests.post(url, headers=headers, json=data_to_publish)
        r.raise_for_status()
        logging.info(f"Artyku≈Ç opublikowany pomy≈õlnie! URL: {r.json().get('link')}")
        return r.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"B≈ÇƒÖd podczas publikacji w WordPress: {e}")
        logging.error(f"Odpowied≈∫ serwera: {r.text}")
        return None

def run_generation_process(site_key, topic_source, manual_topic_data):
    """G≈Ç√≥wna funkcja wykonawcza, wywo≈Çywana przez aplikacjƒô webowƒÖ."""
    site_config = SITES[site_key]
    site_config['site_key'] = site_key

    topic_data = manual_topic_data if topic_source == 'Rƒôcznie' else get_event_registry_topics(site_config)
    if not topic_data:
        return "B≈ÅƒÑD: Nie uda≈Ço siƒô uzyskaƒá tematu. Sprawd≈∫ Event Registry lub dane wprowadzone rƒôcznie."

    # Krok 1: Research
    research_data = step1_research(topic_data, site_config)
    if not research_data: return "B≈ÅƒÑD: Krok 1 (Research) nie powi√≥d≈Ç siƒô. Sprawd≈∫ logi."
    logging.info("--- WYNIK RESEARCHU ---\n" + research_data)

    # --- NOWA LOGIKA ---
    # Sprawdzamy, czy temat jest rƒôczny i pobieramy s≈Çowo kluczowe
    keyword_for_title = None
    if topic_source == 'Rƒôcznie':
        keyword_for_title = topic_data.get('title')
        if keyword_for_title:
            logging.info(f"Wykryto rƒôczne s≈Çowo kluczowe dla tytu≈Çu: '{keyword_for_title}'")
    # ------------------

    # Krok 2: Planowanie (z przekazaniem s≈Çowa kluczowego)
    outline = step2_create_outline(research_data, site_config, keyword=keyword_for_title)
    if not outline: return "B≈ÅƒÑD: Krok 2 (Planowanie) nie powi√≥d≈Ç siƒô. Sprawd≈∫ logi."
    logging.info("--- WYGENEROWANY PLAN ARTYKU≈ÅU ---\n" + outline)
    
    # Krok 3: Pisanie
    generated_html = step3_write_article(research_data, outline, site_config)
    if not generated_html: return "B≈ÅƒÑD: Krok 3 (Pisanie) nie powi√≥d≈Ç siƒô. Sprawd≈∫ logi."

    # Przetwarzanie i publikacja (reszta funkcji bez zmian)
    soup = BeautifulSoup(generated_html, 'html.parser')
    title_tag = soup.find('h2')
    post_title = title_tag.get_text(strip=True) if title_tag else topic_data.get('title', 'Brak tytu≈Çu')
    if title_tag: title_tag.decompose()
    post_content = str(soup)
    
    all_categories = get_all_wp_categories(site_config)
    
    if all_categories is None:
        logging.warning("Nie uda≈Ço siƒô pobraƒá kategorii z WP. U≈ºywam domy≈õlnej 'Bez kategorii'.")
        chosen_category_name = "Bez kategorii"
        category_id = 1 
    else:
        chosen_category_name = choose_category_ai(post_title, post_content, list(all_categories.keys()))
        category_id = all_categories.get(chosen_category_name)
    
    tags_list = generate_tags_ai(post_title, post_content)
    tag_ids = [get_or_create_term_id(tag, "tags", site_config) for tag in tags_list]
    
    featured_media_id = upload_image_to_wp(topic_data.get('image_url'), post_title, site_config)

    data_to_publish = {"title": post_title, "content": post_content, "status": "publish", "categories": [category_id] if category_id else [], "tags": [tid for tid in tag_ids if tid]}
    if featured_media_id: data_to_publish['featured_media'] = featured_media_id

    result = publish_to_wp(data_to_publish, site_config)
    
    if result and result.get('link'):
        return f"Artyku≈Ç opublikowany pomy≈õlnie! Link: {result.get('link')}"
    else:
        return "B≈ÅƒÑD: Publikacja nie powiod≈Ça siƒô. Sprawd≈∫ logi."
